AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A serverless deployment pipeline using Lambda, DynamoDB, and other AWS
  services.
Resources:
  PipelineConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PipelineConfig
      AttributeDefinitions:
      - AttributeName: pipeline_id
        AttributeType: S
      KeySchema:
      - AttributeName: pipeline_id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: PipelineConfigTable
  BuildFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: s3://my-server-deployment-bucket-proj/c84a982ebf3e451e2c0880b2285189a6
      Role:
        Fn::GetAtt:
        - BuildFunctionRole
        - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /build
            Method: post
    Metadata:
      SamResourceId: BuildFunction
  BuildFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: BuildFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            Resource: '*'
    Metadata:
      SamResourceId: BuildFunctionRole
  DeployFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: s3://my-server-deployment-bucket-proj/66589c13aa617f6d947b7b81989893c3
      Role:
        Fn::GetAtt:
        - DeployFunctionRole
        - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /deploy
            Method: post
    Metadata:
      SamResourceId: DeployFunction
  DeployFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DeployFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codedeploy:CreateDeployment
            Resource: '*'
    Metadata:
      SamResourceId: DeployFunctionRole
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: s3://my-server-deployment-bucket-proj/dc9d25ef1e5ab59262a8abc8799efe7f
      Role:
        Fn::GetAtt:
        - NotificationFunctionRole
        - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /notify
            Method: post
    Metadata:
      SamResourceId: NotificationFunction
  NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: NotificationFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: '*'
    Metadata:
      SamResourceId: NotificationFunctionRole
  TriggerPipelineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: s3://my-server-deployment-bucket-proj/cfdc018d22e700f5e05241ff9d1ed64e
      Role:
        Fn::GetAtt:
        - TriggerPipelineFunctionRole
        - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /trigger
            Method: post
    Metadata:
      SamResourceId: TriggerPipelineFunction
  TriggerPipelineFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: TriggerPipelineFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codepipeline:StartPipelineExecution
            Resource: '*'
    Metadata:
      SamResourceId: TriggerPipelineFunctionRole
  PipelineManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: s3://my-server-deployment-bucket-proj/ebdc93cb1390fbd8899b9b0ecb0c80ba
      Role:
        Fn::GetAtt:
        - PipelineManagerFunctionRole
        - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /pipeline
            Method: post
    Metadata:
      SamResourceId: PipelineManagerFunction
  PipelineManagerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PipelineManagerFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: '*'
    Metadata:
      SamResourceId: PipelineManagerFunctionRole
