AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A serverless deployment pipeline using Lambda, DynamoDB, S3, and other AWS services.

Resources:

  PipelineConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PipelineConfig
      AttributeDefinitions:
        - AttributeName: pipeline_id
          AttributeType: S
      KeySchema:
        - AttributeName: pipeline_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BuildFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/build_function/
      Role: !GetAtt BuildFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /build
            Method: post

  BuildFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BuildFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - s3:PutObject
                  - s3:GetObject
                Resource: "*" 

  DeployFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/deploy_function/
      Role: !GetAtt DeployFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /deploy
            Method: post

  DeployFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeployFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - s3:GetObject  # Assuming this function also interacts with S3
                Resource: "*"  

  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/notifications/
      Role: !GetAtt NotificationFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /notify
            Method: post

  NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NotificationFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"  

  TriggerPipelineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/trigger_pipeline/
      Role: !GetAtt TriggerPipelineFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /trigger
            Method: post

  # TriggerPipelineFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: TriggerPipelineFunctionPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - codepipeline:StartPipelineExecution
  #               Resource: "*" 

  PipelineManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/pipeline_manager/
      Role: !GetAtt PipelineManagerFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /pipeline
            Method: post

  PipelineManagerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PipelineManagerFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: "*"  
